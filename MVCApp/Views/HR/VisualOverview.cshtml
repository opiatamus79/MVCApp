@model IEnumerable<MVCApp.ViewModels.ContractChanges>

@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Visual Overview</h2>

<canvas id="myChart" width="50" height="20"></canvas>


<p>
    Pending: @ViewBag.pending Approved: @ViewBag.approved In-Process: @ViewBag.editing Reverted: @ViewBag.optout
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.StatusName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FilePath)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Reason)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.UpdatedOn)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.StatusName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FilePath)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Reason)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedOn)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID })
            </td>
        </tr>
    }

</table>

@section Scripts
{
    <script src="~/Scripts/Chart.js"></script>
    <script>
        var ctx = document.getElementById('myChart');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Pending', 'Approved', 'In-Process', 'Reverted'],
                datasets: [{
                    label: '# of Change Logs',
                    data: [@ViewBag.Pending, @ViewBag.Approved, @ViewBag.editing, @ViewBag.optout ],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    </script>

}